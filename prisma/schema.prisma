generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Person {
  id         Int       @id @default(autoincrement())
  name       String
  lastname   String
  birthdate  DateTime?
  phone      String
  document   String?
  userId     String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  locationId Int
  Location   Location  @relation(fields: [locationId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
}

model ContactPerson {
  id              Int      @id @default(autoincrement())
  name            String
  lastname        String
  phone           String
  document        String?
  companyPosition String
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  email           String   @default("")
  Company         Company?
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime
  roleId    Int
  Company   Company?
  Person    Person?
  Role      Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User[]
}

model Activity {
  id          Int       @id @default(autoincrement())
  name        String
  code        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Company     Company[]
}

model Location {
  id        Int      @id @default(autoincrement())
  street    String
  number    String
  city      String
  state     String
  country   String
  zip       String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime
  Company   Company?
  Person    Person[]
}

model Company {
  id              Int           @id @default(autoincrement())
  name            String
  socialName      String
  description     String
  phone           String
  activityId      Int
  userId          String        @unique
  locationId      Int           @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  cifnif          String
  landlinePhone   String
  assetId         Int?          @unique
  contactPersonId Int           @unique
  email           String?       @default("")
  Activity        Activity      @relation(fields: [activityId], references: [id])
  Asset           Asset?        @relation(fields: [assetId], references: [id])
  ContactPerson   ContactPerson @relation(fields: [contactPersonId], references: [id])
  Location        Location      @relation(fields: [locationId], references: [id])
  User            User          @relation(fields: [userId], references: [id])
}

model Asset {
  id        Int      @id @default(autoincrement())
  publicId  String
  secureUrl String
  url       String
  width     Int
  height    Int
  format    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Company   Company?
}

model country {
  id         Int        @id
  name_es    String     @db.VarChar
  name_en    String     @db.VarChar
  cod_iso2   String?    @db.VarChar(10)
  cod_iso3   String?    @db.VarChar(10)
  phone_code String?    @db.VarChar(10)
  Province   province[]
}

model province {
  id         Int      @id
  name       String   @db.VarChar
  cod_iso2   String   @db.VarChar
  country_id Int?
  Country    country? @relation(fields: [country_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "province_country_fk")
}
